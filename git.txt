每一次不会就
	git status(会有提示下一步怎么做)
username huxiaoqia
password hyx22358uu
username yuxianghu

1.初始化
	git init

2.添加文档到仓库
	git add file

3.提交文档到仓库
	git commit -m "file的注释"
	
4.(修改过原来的文件)查看仓里文件的状态
	git status

5.查看文件修改了哪里(再次提交要重新git add和git commit)
	git diff file

6.查看提交的不同版本的信息(最好加一句 --pretty=oneline)
	git log

7.撤回到上一个版本
	git reset [--hard HEAD^] ^一定要加
	或者用git reset [--hard id号]

8.记录每次的版本的id号
	git reflog

撤销修改
	1.没有git add前(只有工作区时)
		git checkout -- file
	2.git add在暂存区时
		第一步先git reset HEAD <file>撤出暂存区回到工作区。
		第二步再git checkout -- file

删除文件：
	第一步先在工作区删除文件 rm file
	第二步再在暂存区删除文件 git rm file
	第三步是提交信息给版本库 git commit -m "注释"

	（如果是删除错误，只要版本库中还有，都可用git chekcout -- file恢复,如果用
	了git rm file,还要加一句git reset HEAD file)







关键是使用github
远程仓库
1.创建SH Key。在用户主目录下有无.ssh目录,.ssh有无id_rsa(个人密码)和id_rsa.pub(公用)两文件
没有则打开Shell
	ssh-keygen -t rsa -C "1878887967@qq.com"然后不设置密码，一直按enter
2.登陆github ,打开account settings
 然后点add ssh key, 填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容


 (一)添加远程仓库
	1.首先，登陆GitHub，然后，在右上角找到“Create a new repo”按钮，创建一个新的仓库


	2.在Repository name填入名字，点击“Create repository”按钮，创建了一个新的Git仓库


	3.使已有的本地仓库与之关联
		git remote add origin git@github.com:huxiaoqia/learn.git
	(origin，这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就知道是远程库)




	4.下一步，就可以把本地库的所有内容推送到远程库上
		 git push -u origin master
	(第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的
	远程新的master分支，还会把本地的master分支和远程的master分支关联起来，
	在以后的推送或者拉取时就可以简化命令)


(二)从远程库克隆
	
	1.首先，登陆GitHub，然后，在右上角找到“Create a new repo”按钮，创建一个新的仓库

	
	2.在Repository name填入名字,打钩initialize this,然后点击“Create repository”按钮，创建了一个新的Git仓库
	(我们勾选initialize this repository with a README，这样GitHub会自动为我们创建一个README.md文件。创建完毕后，可以看到README.md文件)
	一种方法：git clone git@github.com:huxiaoqia/tian.git
	二种方法：git clone https://github.com/huxiaoqia/tian.git




(三)分支管理
	
	1.首先，我们创建dev分支，然后切换到dev分支
		git checkout -b dev (-b = built)
	git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：
	git branch dev
	git checkout dev

	2.然后，用git branch命令查看当前分支
		git branch
		当前分支前面会标一个*号

	3.然后dev分支的工作完成，我们就可以切换回master分支(git checkout切换分支)
		git checkout master

	4.最后，把dev分支的工作成果合并到master分支
		git merge dev

	5.合并完成后，就可以放心地删除dev分支
		git branch -d dev
	
		[ 查看分支：git branch

		 创建分支：git branch <name>

		 切换分支：git checkout <name>

		 创建+切换分支：git checkout -b <name>

		 合并某分支到当前分支：git merge <name>

		 删除分支：git branch -d <name>]

 注意如果两个分支都修改了则合并时有问题(Git用<<<<<<<，=======，>>>>>>>标记出不同分支的内容，删除后再提交)
	6.用带参数的git log也可以看到分支的合并情况：
		git log --graph --pretty=oneline --abbrev-commit


	修改bug的分支(在一个分支中工作时有一个更重要的任务要创建分支)

	1.Git还提供了一个stash功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作

	2.首先确定要在哪个分支上修复bug，假定需要在master分支上修复，就从master创建临时分支
		先切换回那个分支git checkout master
		后创建bug分支git checkout -b issue-101

	3.修复完成后，切换到master分支，并完成合并，最后删除issue-101分支
		一：git checkout master
		二：git merge --no-ff -m "merged bug fix" issue-101
		三：git branch -d bug


	4.bug修复只花了5分钟！现在，是时候接着回到dev分支干活了
		1.git checkout dev
		2.用git stash list命令看看

	5.工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，有两个办法
		一是用git stash apply恢复，恢复后，stash内容并不删除,你需要用git stash drop来删除
		另一种方式是用git stash pop，恢复的同时把stash内容也删了


	多人合作
		查看远程库的信息，用git remote-v

		你的小伙伴要在dev分支上开发，就必须创建远程origin的dev分支到本地，于是他用这个命令创建本地dev分支
		git checkout -b dev origin/dev


		时不时地把dev分支push到远程：
			git push origin dev


		推送失败，两个人同一个dev推送的提交有冲突，解决办法也很简单，Git已经提示我们，先用git pull把最新的提交从origin/dev抓下来，然后，在本地合并，解决冲突，再推送
		git pull

		git pull也失败了，原因是没有指定本地dev分支与远程origin/dev分支的链接，根据提示，设置dev和origin/dev的链接：
		 git branch --set-upstream dev origin/dev






搭建Git服务器
	1.第一步，安装git：
		sudo apt-get install git

	2.创建一个git用户，用来运行git服务
		sudo adduser git

	3.第三步，创建证书登录
		收集所有需要登录的用户的公钥，就是他们自己的id_rsa.pub文件，把所有公钥导入到/home/git/.ssh/authorized_keys文件里，一行一个


	4.第四步，初始化Git仓库
	先选定一个目录作为Git仓库，假定是/srv/sample.git，在/srv目录下输入命令：
			sudo git init --bare sample.git



